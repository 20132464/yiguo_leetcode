class Solution(object):
    def maxSubArray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        max_sum = nums[0]
        pre_sum = 0
        for i in nums:
            if pre_sum < 0:
                pre_sum = i
            else:
                pre_sum += i
            max_sum = max(max_sum, pre_sum)
        return max_sum
------------------------------------------
思路：
（1）递推式：dp[i] = max(dp[i - 1] + nums[i], nums[i])，dp[i]的意义是以nums[i]为结尾的子序列的和的最大值，那么这个递推式的意义是当之前累积的最大值是个负数时则以nums[i]为开始计算子序列。
（2）边界：dp[0] = nums[0]
做完这道题有个小小的体会：我曾经以为动态规划最后一个位置就是所要求的答案，但其实并不是，比如这道题，实际上答案是max(dp)。

链接：https://leetcode-cn.com/problems/maximum-subarray/solution/53-python-dong-tai-gui-hua-by-lullaby/
class Solution(object):
    def maxSubArray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        dp = [0] * len(nums)
        max_num = dp[0] = nums[0]
        for i in range(1, len(nums)):
            dp[i] = max(dp[i - 1] + nums[i], nums[i])
            max_num = max(dp[i], max_num)
        return max_num
